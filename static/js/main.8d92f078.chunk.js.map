{"version":3,"sources":["components/ui-form/searchForm.js","components/ui-form/SearchFormTournament.js","lib/loadBracket.js","lib/searchTournament.js","lib/tournamentService.js","lib/checkPlayerName.js","lib/checkTournamentName.js","lib/getGameEvent.js","lib/checkGame.js","App.js","lib/error.js","serviceWorker.js","index.js"],"names":["SearchForm","props","id","onSubmit","handle_submit","className","htmlFor","type","name","onChange","input_change","value","player1","SearchFormTournament","tournament_submit","tournament","game","event_list","map","event","i","key","toString","load_bracket","page_num","player_name","a","get_player_name","tournament_player_list","Array","fill","undefined","get_tournament_player_list","url","target_url","split","join","tail_end_url","fetch","get_url","json","get_json","gamer_tag","items","entities","entrants","Object","values","mutations","participants","gamerTag","filter","obj","check_player_name","length","search_tournament","user_input_tournament","game_name","check_tournament_name","tournament_name","load_tournament","get_tournament_object_to_number","tournament_object_to_number","Math","ceil","Number","total_count","phase_group_id","get_fetch","toLowerCase","get_game","game_type_id","game_type","unshift","check_game","App","useState","error","set_error","set_tournament","set_player1","results","set_results","set_game","helper_message","set_helper_message","set_event_list","e","preventDefault","target","search_submit","selected_game","tournament_list","found_message","toUpperCase","message","helper_link","getEventList","submit_search","test_error","class","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8d92f078.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const SearchForm = props => (\r\n  <form id=\"tournamentSearch\" onSubmit={props.handle_submit}>\r\n    <div className=\"inputgrg\">\r\n      <label htmlFor=\"player1\">Player 1\r\n        <input \r\n          type=\"text\"\r\n          name=\"player1\"\r\n          id=\"player1\"\r\n          onChange={props.input_change}\r\n          value={props.player1}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Search Player</button>\r\n    </div>\r\n  </form>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const SearchFormTournament = props => (\r\n  <form onSubmit={props.tournament_submit}>\r\n    <label htmlFor=\"\">Tournament</label>\r\n    <input\r\n      type=\"text\"\r\n      name=\"tournament\"\r\n      id=\"search\"\r\n      onChange={props.input_change}\r\n      value={props.tournament}\r\n    />\r\n    <select name=\"game\" onChange={props.input_change} value={props.game}>\r\n      {props.event_list.map((event, i) => <option key={i.toString()}>{event}</option>)}\r\n    </select>\r\n    <button type=\"submit\">Search</button>\r\n  </form>\r\n);","import { check_player_name } from \"./index\";\r\n\r\nexport const load_bracket = async (page_num, player_name, tournament, game) => {\r\n  const get_player_name = async () => {\r\n    const tournament_player_list = Array(page_num).fill(undefined);\r\n    const get_tournament_player_list = tournament_player_list.map(async (url, i) => {\r\n      const target_url = `https://cors-anywhere.herokuapp.com/https://api.smash.gg/tournament/${tournament.split(\" \").join(\"-\")}`;\r\n      const tail_end_url = `/event/${game.split(\" \").join(\"-\")}/standings?entityType=event&expand[]=entrants&mutations[]=playerData&mutations[]=standingLosses&page=${i}&per_page=100`;\r\n      const get_url = await fetch(target_url + tail_end_url);\r\n      const get_json = await get_url.json();\r\n      const gamer_tag = get_json.items.entities.entrants.map(name => {\r\n        return Object.values(name.mutations.participants)[0].gamerTag;\r\n      }) \r\n      .filter(obj => check_player_name(obj) === check_player_name(player_name));\r\n      return gamer_tag.length === 0 ? \"Player Not Found!\" : gamer_tag[0];\r\n      });\r\n    return get_tournament_player_list[0];\r\n  }\r\n  return get_player_name();\r\n}\r\n  ","import { load_tournament, check_tournament_name, load_bracket } from \"./index\";\r\n\r\nexport const search_tournament = async (user_input_tournament, player_name, game_name) =>  {\r\n  const tournament_name = await check_tournament_name(user_input_tournament);\r\n  const get_tournament_object_to_number = await load_tournament(tournament_name, game_name);\r\n  const tournament_object_to_number = Math.ceil(Number(get_tournament_object_to_number.total_count)/100);\r\n  return load_bracket(tournament_object_to_number, player_name, user_input_tournament, game_name);\r\n}\r\n","export const load_tournament = async (phase_group_id, game_name) => {\r\n  const target_url = `https://cors-anywhere.herokuapp.com/https://api.smash.gg/tournament/${phase_group_id}`;\r\n  const tail_end_url = `/event/${game_name.split(\" \").join(\"-\")}/standings?entityType=event&expand[]=entrants&mutations[]=playerData`\r\n  const get_fetch = await fetch(target_url + tail_end_url);\r\n  const get_json = await get_fetch.json();\r\n  return get_json;\r\n}\r\n","export const check_player_name = name => name.toLowerCase().split(\" \").join(\"\");","export const check_tournament_name = name => (\r\n  name.toLowerCase().split(`.`).join(``).split(` `).join(`-`)\r\n);","import { check_tournament_name } from \"./index\";\r\n\r\nexport const get_game = async phase_group_id => {\r\n    let tournament = check_tournament_name(phase_group_id);\r\n    const proxy_url = `https://cors-anywhere.herokuapp.com/`;\r\n    const target_url = `https://api.smash.gg/tournament/${tournament}?expand[]=event`;\r\n    const get_url = await fetch(proxy_url + target_url);\r\n    const get_json = await get_url.json();\r\n    const game_type_id = await Object.values(get_json.entities.event);\r\n    const game_type = game_type_id.map(game => game.name);\r\n    game_type.unshift(\"Select Game\");\r\n    return game_type; \r\n}\r\n  ","export const check_game = game => game === \"\" || game === \"Select Game\" ? undefined : game;","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport { SearchForm, SearchFormTournament } from \"./components/ui-form\";\r\nimport { search_tournament, test_error, get_game, check_game } from \"./lib\";\r\n\r\nexport default function App () {\r\n  const [error, set_error] = useState(\"\");\r\n  const [tournament, set_tournament] = useState(\"\");\r\n  const [player1, set_player1] = useState(\"\");\r\n  const [results, set_results] = useState(\"\");\r\n  const [game, set_game] = useState(\"\");\r\n  const [helper_message, set_helper_message] = useState(\"\");\r\n  const [event_list, set_event_list] = useState([\"Select Game\"]);\r\n\r\n  const input_change = e => {\r\n    e.preventDefault();\r\n    if(e.target.name === \"tournament\"){\r\n      set_tournament(e.target.value);\r\n    } else if(e.target.name === \"game\") {\r\n      set_game(e.target.value);\r\n    } else {\r\n      set_player1(e.target.value);\r\n    }\r\n  }\r\n\r\n  const search_submit = async e =>  {\r\n    e.preventDefault();\r\n    const selected_game = check_game(game);    \r\n    const tournament_list = await search_tournament(tournament, player1, selected_game);\r\n    const found_message = `${tournament_list} did play in ${tournament.toUpperCase()} for ${selected_game}`;\r\n    const not_found_message = `Player Not Found! To check for players from this tournament check.`; \r\n    const message = tournament_list === \"Player Not Found!\" ? `${not_found_message}` : found_message; \r\n    const helper_link = tournament_list === \"Player Not Found!\" ? \"smash.gg\" : \"\";\r\n    set_results(message);\r\n    set_helper_message(helper_link);\r\n  }\r\n\r\n  const tournament_submit = async e =>  {\r\n    e.preventDefault();\r\n    const getEventList = await get_game(tournament); \r\n    set_event_list(getEventList);\r\n  }\r\n\r\n  const empty_submit = e => {\r\n    e.preventDefault();\r\n    set_error(test_error(tournament, player1));\r\n  }\r\n\r\n  const submit_search = tournament ? search_submit : empty_submit;\r\n  return (\r\n    <>\r\n      <header>\r\n        <aside></aside>\r\n        <h2 className=\"App-header\">Welcome to Fighter Stats</h2>\r\n        <aside></aside>\r\n      </header>\r\n      <main className=\"main\">\r\n        <aside></aside>\r\n        <section class=\"content\">\r\n          <p className=\"App-intro\">Select the Tournament</p>\r\n          <p className=\"errot_text\">{error}</p>\r\n          <SearchFormTournament\r\n            input_change={input_change}\r\n            tournament_submit={tournament_submit}\r\n            event_list={event_list}\r\n            tournament={tournament}\r\n            game={game} \r\n          />\r\n          <SearchForm\r\n            input_change={input_change}\r\n            player1={player1}\r\n            handle_submit={submit_search}\r\n          />\r\n          <div className=\"text_container\">\r\n            <p className=\"body_text\">1. To test the form go to <a href=\"https://smash.gg\">smash.gg</a> and copy and paste the name of the tournament in the first</p>\r\n            <p className=\"body_text\">2. Select a game</p>\r\n            <p className=\"body_text\">3. Type a player's name in the Player field to see if that person attended the tournament</p>\r\n            <p className=\"body_text\">{results} <a href=\"https://smash.gg\">{helper_message}</a></p>\r\n          </div>\r\n        </section>\r\n        <aside></aside>\r\n      </main>\r\n      <footer className=\"footer\">\r\n        <aside></aside>\r\n        <p className=\"copyright\">&copy; 2020 DeMarc Johnson</p>\r\n        <aside></aside>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n","export const test_error = (tournament, player1) => (\r\n  tournament === `` && player1 === `` ? `All fields are empty` :\r\n  tournament === `` ? `The tournament field is empty` : \r\n  ``  \r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}