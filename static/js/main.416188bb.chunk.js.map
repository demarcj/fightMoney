{"version":3,"sources":["components/player_form.js","components/tournament_form.js","components/header.tsx","components/footer.tsx","components/help.tsx","components/info.tsx","components/about.tsx","components/home.tsx","lib/load_bracket.js","lib/search_tournament.tsx","lib/load_tournament.tsx","lib/check_player_name.tsx","lib/check_tournament_name.tsx","lib/get_game_event.tsx","lib/check_game.tsx","App.js","lib/error.tsx","serviceWorker.js","index.js"],"names":["PlayerForm","props","id","onSubmit","submit_search","className","htmlFor","type","name","onChange","input_change","value","player","TournamentForm","tournament_submit","tournament","game","event_list","map","event","i","key","toString","Header","Footer","Help","href","target","Info","results","helper_message","About","Home","error","load_bracket","page_num","player_name","a","get_player_name","tournament_player_list","Array","fill","undefined","get_tournament_player_list","url","target_url","split","join","tail_end_url","fetch","get_url","json","get_json","gamer_tag","items","entities","entrants","Object","values","mutations","participants","gamerTag","filter","obj","check_player_name","length","search_tournament","check_tournament_name","tournament_name","load_tournament","get_tournament_object_to_number","tournament_object_to_number","Math","ceil","Number","total_count","phase_group_id","game_name","get_fetch","toLowerCase","get_game","game_type_id","game_type","unshift","check_game","App","useState","set_error","set_tournament","set_player","set_results","set_game","set_helper_message","set_event_list","e","preventDefault","search_submit","selected_game","tournament_list","found_message","toUpperCase","message","helper_link","getEventList","test_error","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.416188bb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const PlayerForm = props => (\r\n  <form id=\"tournamentSearch\" onSubmit={props.submit_search}>\r\n    <div className=\"inputgrg\">\r\n      <label htmlFor=\"player\">Player</label>\r\n        <input \r\n          type=\"text\"\r\n          name=\"player\"\r\n          id=\"player\"\r\n          onChange={props.input_change}\r\n          value={props.player}\r\n        />\r\n      <button type=\"submit\">Search Player</button>\r\n    </div>\r\n  </form>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const TournamentForm = props => (\r\n  <form onSubmit={props.tournament_submit}>\r\n    <label htmlFor=\"tournament\">Tournament</label>\r\n    <input\r\n      type=\"text\"\r\n      name=\"tournament\"\r\n      id=\"search\"\r\n      onChange={props.input_change}\r\n      value={props.tournament}\r\n    />\r\n    <button type=\"submit\">Search</button>\r\n    <select className=\"game_form\" name=\"game\" onChange={props.input_change} value={props.game}>\r\n      {props.event_list.map((event, i) => <option key={i.toString()}>{event}</option>)}\r\n    </select>\r\n  </form>\r\n);","import React from \"react\";\r\n\r\nexport const Header = () => (\r\n  <header>\r\n    <aside></aside>\r\n    <h2 className=\"App-header\">Welcome to Fighter Stats</h2>\r\n    <aside></aside>\r\n  </header>\r\n);","import React from \"react\";\r\n\r\nexport const Footer = () => (\r\n  <footer className=\"footer\">\r\n    <p className=\"copyright\">&copy; 2020 DeMarc Johnson</p>\r\n  </footer>\r\n);","import React from \"react\";\r\n\r\nexport const Help = () => (\r\n  <>\r\n    <h2 className=\"main_header\">Help</h2>\r\n    <p className=\"body_text\">1. To test the form go to <a href=\"https://smash.gg\" target=\"_blank\">smash.gg</a> and copy and paste the name of the tournament in the first</p>\r\n    <p className=\"body_text\">2. Select a game</p>\r\n    <p className=\"body_text\">3. Type a player's name in the Player field to see if that person attended the tournament</p>\r\n  </>\r\n);","import React from 'react';\r\n\r\nexport const Info = (props:any) => (\r\n  <aside className=\"stats_aside\">\r\n    <h2 className=\"stats_header\">Stats</h2>\r\n    <p className=\"body_text\">{props.results} <a href=\"https://smash.gg\">{props.helper_message}</a></p>\r\n  </aside>\r\n);","import React from \"react\";\r\n\r\nexport const About = () => (\r\n  <>\r\n    <h2>About Fight Stat</h2>\r\n    <p className=\"body_text\">\r\n      Are you tired of the work of searching top 8 results in&nbsp; \r\n      <a href=\"https://smash.gg\" target=\"_blank\">smash.gg</a>. \r\n      I like that site a lot but it take some work to get tournament result. \r\n      Fight Stats uses the smash.gg api to get the tournament result in a \r\n      faster by typing in the tournament, game and player tag name\r\n    </p>\r\n  </>\r\n);","import React from 'react';\r\n\r\nexport const Home = (props:any) => (\r\n  <>\r\n    <h2 className=\"main_header\">Select the Tournament</h2>\r\n    <p className=\"errot_text\">{props.error}</p>\r\n  </>\r\n);","import { check_player_name } from \"./index\";\r\n\r\nexport const load_bracket = async (page_num, player_name, tournament, game) => {\r\n  const get_player_name = async () => {\r\n    const tournament_player_list = Array(page_num).fill(undefined);\r\n    const get_tournament_player_list = tournament_player_list.map(async (url, i) => {\r\n      const target_url = `https://cors-anywhere.herokuapp.com/https://api.smash.gg/tournament/${tournament.split(\" \").join(\"-\")}`;\r\n      const tail_end_url = `/event/${game.split(\" \").join(\"-\")}/standings?entityType=event&expand[]=entrants&mutations[]=playerData&mutations[]=standingLosses&page=${i}&per_page=100`;\r\n      const get_url = await fetch(target_url + tail_end_url);\r\n      const get_json = await get_url.json();\r\n      const gamer_tag = get_json.items.entities.entrants.map((name) => {\r\n        return Object.values(name.mutations.participants)[0].gamerTag;\r\n      }) \r\n      .filter((obj) => check_player_name(obj) === check_player_name(player_name));\r\n      return gamer_tag.length === 0 ? \"Player Not Found!\" : gamer_tag[0];\r\n      });\r\n    return get_tournament_player_list[0];\r\n  }\r\n  return get_player_name();\r\n}\r\n  ","import { load_tournament, check_tournament_name, load_bracket } from \"./index\";\r\n\r\nexport const search_tournament = async (tournament:string, player:string, game:string) =>  {\r\n  const tournament_name = await check_tournament_name(tournament);\r\n  const get_tournament_object_to_number = await load_tournament(tournament_name, game);\r\n  const tournament_object_to_number = Math.ceil(Number(get_tournament_object_to_number.total_count)/100);\r\n  return load_bracket(tournament_object_to_number, player, tournament, game);\r\n}\r\n","export const load_tournament = async (phase_group_id:string, game_name:string) => {\r\n  const target_url = `https://cors-anywhere.herokuapp.com/https://api.smash.gg/tournament/${phase_group_id}`;\r\n  const tail_end_url = `/event/${game_name.split(\" \").join(\"-\")}/standings?entityType=event&expand[]=entrants&mutations[]=playerData`\r\n  const get_fetch = await fetch(target_url + tail_end_url);\r\n  const get_json = await get_fetch.json();\r\n  return get_json;\r\n}\r\n","export const check_player_name = (name:string) => name.toLowerCase().split(\" \").join(\"\");","export const check_tournament_name = (name:string) => (\r\n  name.toLowerCase().split(`.`).join(``).split(` `).join(`-`)\r\n);","import { check_tournament_name } from \"./index\";\r\n\r\nexport const get_game = async (phase_group_id:string) => {\r\n    let tournament = check_tournament_name(phase_group_id);\r\n    const proxy_url = `https://cors-anywhere.herokuapp.com/`;\r\n    const target_url = `https://api.smash.gg/tournament/${tournament}?expand[]=event`;\r\n    const get_url = await fetch(proxy_url + target_url);\r\n    const get_json = await get_url.json();\r\n    const game_type_id = await Object.values(get_json.entities.event);\r\n    const game_type = game_type_id.map((game:any) => game.name);\r\n    game_type.unshift(\"Select Game\");\r\n    return game_type; \r\n}\r\n  ","export const check_game = (game:string) => (\r\n  game === \"\" || game === \"Select Game\" ? \"\" : game\r\n);","import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport { BrowserRouter as Router, Switch, Route, NavLink } from \"react-router-dom\";\r\nimport { PlayerForm, TournamentForm, Footer, Header, Help, Info, About, Home } from \"./components\";\r\nimport { search_tournament, test_error, get_game, check_game } from \"./lib\";\r\n\r\nexport default function App() {\r\n  const [error, set_error] = useState(\"\");\r\n  const [tournament, set_tournament] = useState(\"\");\r\n  const [player, set_player] = useState(\"\");\r\n  const [results, set_results] = useState(\"\");\r\n  const [game, set_game] = useState(\"\");\r\n  const [helper_message, set_helper_message] = useState(\"\");\r\n  const [event_list, set_event_list] = useState([\"Select Game\"]);\r\n\r\n  const input_change = e => {\r\n    e.preventDefault();\r\n    if (e.target.name === \"tournament\") {\r\n      set_tournament(e.target.value);\r\n    } else if (e.target.name === \"game\") {\r\n      set_game(e.target.value);\r\n    } else {\r\n      set_player(e.target.value);\r\n    }\r\n  };\r\n\r\n  const search_submit = async e => {\r\n    e.preventDefault();\r\n    const selected_game = check_game(game);\r\n    const tournament_list = await search_tournament( tournament, player, selected_game );\r\n    const found_message = `${tournament_list} did play in ${tournament.toUpperCase()} for ${selected_game}`;\r\n    const not_found_message = `Player Not Found! To check for players from this tournament check.`;\r\n    const message = tournament_list === \"Player Not Found!\" ? `${not_found_message}` : found_message;\r\n    const helper_link = tournament_list === \"Player Not Found!\" ? \"smash.gg\" : \"\";\r\n    set_results(message);\r\n    set_helper_message(helper_link);\r\n  };\r\n\r\n  const tournament_submit = async e => {\r\n    e.preventDefault();\r\n    const getEventList = await get_game(tournament);\r\n    set_event_list(getEventList);\r\n  };\r\n\r\n  const empty_submit = e => {\r\n    e.preventDefault();\r\n    set_error(test_error(tournament, player));\r\n  };\r\n\r\n  const submit_search = tournament ? search_submit : empty_submit;\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <main className=\"main\">\r\n        <nav className=\"nav_link\">\r\n          <ul className=\"nav_list\">\r\n            <li className=\"nav_list_item\">\r\n              <NavLink className=\"nav_list_link\" to=\"/fightStat\">Home</NavLink>\r\n            </li>\r\n            <li className=\"nav_list_item\">\r\n              <NavLink className=\"nav_list_link\" to=\"/about\">About</NavLink>\r\n            </li>\r\n            <li className=\"nav_list_item\">\r\n              <NavLink className=\"nav_list_link\" to=\"/help\">Help</NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <section className=\"center_section\">\r\n          <Switch>\r\n            <Route path=\"/help\">\r\n              <Help />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home error={error}/>\r\n              <TournamentForm\r\n                input_change={input_change}\r\n                tournament_submit={tournament_submit}\r\n                event_list={event_list}\r\n                tournament={tournament}\r\n                game={game}\r\n              />\r\n              <PlayerForm\r\n                input_change={input_change}\r\n                player={player}\r\n                submit_search={submit_search}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n        </section>\r\n        <Info results={results} helper_message={helper_message} />\r\n      </main>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n","export const test_error = (tournament:string, player:string) => (\r\n  tournament === `` && player === `` ? `All fields are empty` :\r\n  tournament === `` ? `The tournament field is empty` : \r\n  ``  \r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}