{"version":3,"sources":["components/static/header.tsx","components/static/footer.tsx","components/home/home.tsx","components/home/player_form.tsx","components/home/tournament_form.tsx","components/nav/nav.tsx","components/help/help.tsx","components/info/info.tsx","components/about/about.tsx","helper_methods/get_player_info.tsx","helper_methods/search_tournament.tsx","helper_methods/check_tournament_name.tsx","helper_methods/load_tournament.tsx","helper_methods/check_player_name.tsx","helper_methods/get_game_event.tsx","helper_methods/check_game.tsx","helper_methods/get_message.tsx","App.tsx","helper_methods/error.tsx","serviceWorker.js","index.js"],"names":["Header","className","Footer","moment","year","Home","PlayerForm","props","id","onSubmit","submit_search","htmlFor","type","name","onChange","input_change","value","player","TournamentForm","tournament_submit","tournament","warning","game","event_list","map","event","i","key","toString","Nav","to","href","target","Help","instruction_list","parse","item","Info","results","error","About","get_player_info","page_num","player_name","a","get_player_name","tournament_player_list","Array","fill","undefined","get_tournament_player_list","url","target_url","split","join","tail_end_url","check_tournament_name","fetch","get_url","json","get_json","gamer_tag","items","entities","entrants","Object","values","mutations","participants","gamerTag","filter","obj","check_player_name","length","search_tournament","tournament_name","load_tournament","get_tournament_object_to_number","tournament_object_to_number","Math","ceil","Number","total_count","stupid","toLowerCase","phase_group_id","game_name","get_fetch","get_game","user_input","game_type_id","game_type","unshift","out_come","check_game","get_message","submited_player","selected_game","found_message","toUpperCase","App","useState","set_error","set_warning","set_tournament","set_player","set_results","set_game","set_event_list","e","preventDefault","submit_player","helper_link","get_event_list","test_error","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.85ac2457.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./static_style.scss\";\r\n\r\nexport const Header: React.FC = () => (\r\n  <header>\r\n    <aside></aside>\r\n    <h1 className=\"site_header\">Welcome to Fighter Stats</h1>\r\n    <aside></aside>\r\n  </header>\r\n);","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./static_style.scss\";\r\n\r\nexport const Footer: React.FC = () => (\r\n  <footer className=\"footer\">\r\n    <h3 className=\"copyright\">&copy; {moment().year()} DeMarc Johnson</h3>\r\n  </footer>\r\n);","import React from 'react';\r\nimport \"./home_style.scss\";\r\n\r\nexport const Home: React.FC = () => (\r\n  <>\r\n    <h2 className=\"content_header header\">Select the Tournament</h2>\r\n  </>\r\n);","import React from \"react\";\r\nimport \"./home_style.scss\";\r\nimport { Interface } from \"readline\";\r\n\r\ninterface T{\r\n  input_change:(e:any) => void,\r\n  player:string,\r\n  submit_search:(e:any) => void\r\n}\r\n\r\nexport const PlayerForm: React.FC <T> = props => (\r\n  <form id=\"tournamentSearch\" className=\"form\" onSubmit={props.submit_search}>\r\n    <div className=\"inputgrg\">\r\n      <label htmlFor=\"player\" className=\"label\">Player</label>\r\n      <input \r\n        type=\"text\"\r\n        name=\"player\"\r\n        id=\"player\"\r\n        className=\"input\"\r\n        onChange={props.input_change}\r\n        value={props.player}\r\n      />\r\n      <button className=\"button\" type=\"submit\">Search Player</button>\r\n    </div>\r\n  </form>\r\n);\r\n","import React from \"react\";\r\nimport \"./home_style.scss\";\r\n\r\ninterface T{\r\n  tournament_submit:(e:any) => void,\r\n  tournament:string,\r\n  input_change:(e:any) => void,\r\n  event_list:string[],\r\n  game:string,\r\n  warning:string\r\n}\r\n\r\nexport const TournamentForm: React.FC <T> = props => (\r\n  <>\r\n    <form onSubmit={props.tournament_submit} className=\"form\" >\r\n      <label htmlFor=\"tournament\" className=\"label\">Tournament</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"tournament\"\r\n        id=\"tournament\"\r\n        className=\"input\"\r\n        onChange={props.input_change}\r\n        value={props.tournament}\r\n      />\r\n      <button className=\"button\" type=\"submit\">Search</button>\r\n      <p className=\"tournament_warning\">{props.warning}</p>\r\n      <select className=\"game_form input\" name=\"game\" onChange={props.input_change} value={props.game}>\r\n        {props.event_list.map((event, i) => <option key={i.toString()}>{event}</option>)}\r\n      </select>\r\n    </form>\r\n  </>\r\n);","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./nav_style.scss\";\r\n\r\nexport const Nav: React.FC = () => (\r\n  <nav className=\"nav_link\">\r\n    <ul className=\"nav_list\">\r\n      <li className=\"nav_list_item\">\r\n        <NavLink className=\"nav_list_link\" to=\"/fightStats\">Home</NavLink>\r\n      </li>\r\n      <li className=\"nav_list_item\">\r\n        <NavLink className=\"nav_list_link\" to=\"/about\">About</NavLink>\r\n      </li>\r\n      <li className=\"nav_list_item\">\r\n        <NavLink className=\"nav_list_link\" to=\"/help\">Help</NavLink>\r\n      </li>\r\n      <li>\r\n        <a className=\"nav_list_link\" href=\"https://demarcj.github.io/portfolio/\" target=\"_blank\">Portfolio</a>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);","import React from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport \"./help_style.scss\";\r\n\r\nexport const Help: React.FC = () => {\r\n  const instruction_list = [\r\n    parse(`To test the form go to <a href=\"https://smash.gg\" target=\"_blank\">smash.gg</a> and copy and paste the name of the tournament in the first`),\r\n    `Select a game`,\r\n    `Type a player's name in the Player field to see if that person attended the tournament`\r\n  ];\r\n  return(\r\n    <>\r\n      <h2 className=\"content_header header\">Help</h2>\r\n      {instruction_list.map((item, i) => <p className=\"body_test\" key={i}>{i + 1}.{item}</p>)}\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport \"./info_style.scss\";\r\n\r\ninterface T{\r\n  results:String,\r\n  error:String\r\n}\r\n\r\nexport const Info: React.FC <T> = props => (\r\n  <aside className=\"stats_aside\">\r\n    <h2 className=\"header stats_header\">Stats</h2>\r\n    <p className=\"body_text\">{props.results}</p>\r\n    <p className=\"errot_text\">{props.error}</p>\r\n  </aside>\r\n);","import React from \"react\";\r\nimport \"./about_style.scss\";\r\n\r\nexport const About: React.FC = () => (\r\n  <>\r\n    <h2 className=\"content_header header\">About Fight Stat</h2>\r\n    <p className=\"body_text\">\r\n      Are you tired of the work of searching top 8 results in&nbsp; \r\n      <a href=\"https://smash.gg\" target=\"_blank\">smash.gg</a>. \r\n      I like that site a lot but it take some work to get tournament result. \r\n      Fight Stats uses the smash.gg api to get the tournament result in a \r\n      faster by typing in the tournament, game and player tag name\r\n    </p>\r\n  </>\r\n);","import { check_player_name, check_tournament_name } from \"./index\";\r\n\r\nexport const get_player_info = async (page_num:number, player_name:string, tournament:string, game:string) => {\r\n  const get_player_name = async () => {\r\n    const tournament_player_list = Array(page_num).fill(undefined);\r\n    const get_tournament_player_list = tournament_player_list.map(async (url, i) => {\r\n      const target_url = `https://cors-anywhere.herokuapp.com/https://api.smash.gg/tournament/${tournament.split(\" \").join(\"-\")}`;\r\n      const tail_end_url = `/event/${check_tournament_name(game)}/standings?entityType=event&expand[]=entrants&mutations[]=playerData&mutations[]=standingLosses&page=${i}&per_page=100`;      \r\n      const get_url = await fetch(target_url + tail_end_url);\r\n      const get_json = await get_url.json();\r\n      const gamer_tag = get_json.items.entities.entrants.map((name:{mutations:{participants:any[]}}) => {\r\n        return Object.values(name.mutations.participants)[0].gamerTag;\r\n      }) \r\n      .filter((obj:string) => check_player_name(obj) === check_player_name(player_name));\r\n      return gamer_tag.length === 0 ? \"Player Not Found!\" : gamer_tag[0];\r\n    });\r\n    return get_tournament_player_list[0];\r\n  }\r\n  return get_player_name();\r\n}\r\n  ","import { load_tournament, check_tournament_name, get_player_info } from \"./index\";\r\n\r\nexport const search_tournament = async (tournament:string, player:string, game:string) =>  {\r\n  const tournament_name = await check_tournament_name(tournament);\r\n  const get_tournament_object_to_number = await load_tournament(tournament_name, game);\r\n  const tournament_object_to_number = Math.ceil(Number(get_tournament_object_to_number.total_count)/100);\r\n  const stupid = await get_player_info(tournament_object_to_number, player, tournament, game);\r\n  return stupid;\r\n}\r\n","export const check_tournament_name = (name:string) => (\r\n  name.toLowerCase().split(`.`).join(``).split(` `).join(`-`)\r\n);","import { check_tournament_name } from \"./check_tournament_name\";\r\n\r\nexport const load_tournament = async (phase_group_id:string, game_name:string) => {\r\n  const target_url = `https://cors-anywhere.herokuapp.com/https://api.smash.gg/tournament/${phase_group_id}`;\r\n  const tail_end_url = `/event/${check_tournament_name(game_name)}/standings?entityType=event&expand[]=entrants&mutations[]=playerData`\r\n  const get_fetch = await fetch(target_url + tail_end_url);\r\n  const get_json = await get_fetch.json();\r\n  return get_json;\r\n}\r\n","export const check_player_name = (name:string) => name.toLowerCase().split(\" \").join(\"\");","import { check_tournament_name } from \"./index\";\r\n\r\nexport const get_game = async (user_input:string) => {\r\n  try{\r\n    const tournament_name = check_tournament_name(user_input);\r\n    const proxy_url = `https://cors-anywhere.herokuapp.com/`;\r\n    const target_url = `https://api.smash.gg/tournament/${tournament_name}?expand[]=event`;\r\n    const get_url = await fetch(proxy_url + target_url);\r\n    const get_json = await get_url.json();\r\n    const game_type_id = await Object.values(get_json.entities.event);\r\n    const game_type = game_type_id.map((game:any) => game.name);\r\n    game_type.unshift(\"Select Game\");\r\n    return game_type; \r\n  } catch (e) {\r\n    const out_come = user_input === `` ? `The tournament field is empty` : `Tournament Not Found`;\r\n    return out_come;\r\n  }\r\n}\r\n  ","export const check_game = (game:string) => (\r\n  game === \"\" || game === \"Select Game\" ? \"\" : game\r\n);","export const get_message = (submited_player:string, tournament:string, selected_game:string) => {\r\n  const found_message = `${submited_player} did play in ${tournament.toUpperCase()} for ${selected_game}`;\r\n  const not_found_message = `Player Not Found! To check for players from this tournament check.`;\r\n  return submited_player === \"Player Not Found!\" ? `${not_found_message}` : found_message;\r\n}","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Header, Footer } from \"./components/static\";\r\nimport { Home, PlayerForm, TournamentForm} from \"./components/home\";\r\nimport { Nav } from \"./components/nav/nav\";\r\nimport { Help } from \"./components/help/help\";\r\nimport { Info } from \"./components/info/info\";\r\nimport { About } from \"./components/about/about\";\r\nimport { search_tournament, test_error, get_game, check_game, get_message } from \"./helper_methods\";\r\nimport \"./App.scss\";\r\n\r\n\r\nexport default function App() {\r\n  const [error, set_error] = useState(\"\");\r\n  const [warning, set_warning] = useState(\"\");\r\n  const [tournament, set_tournament] = useState(\"\");\r\n  const [player, set_player] = useState(\"\");\r\n  const [results, set_results] = useState(\"\"); \r\n  const [game, set_game] = useState(\"\");\r\n  const [event_list, set_event_list] = useState([\"Select Game\"]);\r\n\r\n  const input_change = (e:any) => {\r\n    e.preventDefault();\r\n    if (e.target.name === \"tournament\") {\r\n      set_tournament(e.target.value);\r\n    } else if (e.target.name === \"game\") {\r\n      set_game(e.target.value);\r\n    } else {\r\n      set_player(e.target.value);\r\n    }\r\n  };\r\n\r\n  const submit_player = async (e:any) => {\r\n    e.preventDefault();\r\n    const selected_game = check_game(game);\r\n    const submited_player = await search_tournament( tournament, player, selected_game );\r\n    const found_message = `${submited_player} did play in ${tournament.toUpperCase()} for ${selected_game}`;\r\n    const not_found_message = `Player Not Found! To check for players from this tournament check.`;\r\n    const message = submited_player === \"Player Not Found!\" ? `${not_found_message}` : found_message;\r\n    const helper_link = submited_player === \"Player Not Found!\" ? \"smash.gg\" : \"\";\r\n    set_results(get_message(submited_player, tournament, selected_game));\r\n    set_error(helper_link);\r\n  };\r\n\r\n  const tournament_submit = async (e:any) => {\r\n    e.preventDefault();\r\n    const get_event_list = await get_game(tournament);\r\n    if(typeof get_event_list === `string`){\r\n      set_warning(get_event_list);\r\n    } else {\r\n      set_event_list(get_event_list);\r\n    }\r\n  };\r\n\r\n  const empty_submit = (e:any) => {\r\n    e.preventDefault();\r\n    set_error(test_error(tournament, player));\r\n  };\r\n\r\n  const submit_search = tournament ? submit_player : empty_submit;\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <main className=\"main\">\r\n        <Nav />\r\n        <section className=\"center_section\">\r\n          <Switch>\r\n            <Route path=\"/help\" component={ Help } />\r\n            <Route path=\"/about\" component={ About } />\r\n            <Route path=\"/\">\r\n              <Home />\r\n              <TournamentForm\r\n                input_change={input_change}\r\n                tournament_submit={tournament_submit}\r\n                event_list={event_list}\r\n                tournament={tournament}\r\n                game={game}\r\n                warning={warning}\r\n              />\r\n              <PlayerForm\r\n                input_change={input_change}\r\n                player={player}\r\n                submit_search={submit_search}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n        </section>\r\n        <Info results={results} error={error} />\r\n      </main>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n","export const test_error = (tournament:string, player:string) => (\r\n  tournament === `` && player === `` ? `All fields are empty` :\r\n  tournament === `` ? `The tournament field is empty` : \r\n  ``  \r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}